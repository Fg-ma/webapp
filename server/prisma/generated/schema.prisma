generator client {
  provider = "prisma-client-js"
  output   = "./generated"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model affiliates_relations {
  affiliate_relation_id String @id @unique(map: "affiliate_relation_id_UNIQUE") @db.Char(36)
  affiliate_id_1        String @db.Char(36)
  affiliate_id_2        String @db.Char(36)

  @@unique([affiliate_id_1, affiliate_id_2], map: "unique_affiliate_combination")
}

model collections {
  collection_id      String               @id @unique(map: "temp_collection_id_UNIQUE") @db.Char(36)
  collection_name    String               @db.VarChar(256)
  entity_id          String               @db.Char(36)
  entities           entities             @relation(fields: [entity_id], references: [entity_id], onDelete: NoAction, onUpdate: NoAction, map: "collections_entity_id_fk")
  collections_images collections_images[]
  collections_sheets collections_sheets[]
  collections_videos collections_videos[]

  @@index([entity_id], map: "collections_entity_id_fk_idx")
}

model collections_images {
  collections_images_id String      @id @unique(map: "temp_collections_images_id_UNIQUE") @db.Char(36)
  collection_id         String      @db.Char(36)
  image_id              String      @db.Char(36)
  date_added            DateTime    @db.Timestamp(0)
  pinned                Boolean
  date_pinned           DateTime?   @db.Timestamp(0)
  collections           collections @relation(fields: [collection_id], references: [collection_id], onDelete: NoAction, onUpdate: NoAction, map: "collections_images_collection_id_fk")
  images                images      @relation(fields: [image_id], references: [image_id], onDelete: NoAction, onUpdate: NoAction, map: "collections_images_image_id_fk")

  @@index([collection_id], map: "collections_images_collection_id_fk_idx")
  @@index([image_id])
}

model collections_sheets {
  collections_sheets_id String      @id @unique(map: "temp_collections_sheets_id_UNIQUE") @db.Char(36)
  collection_id         String      @db.Char(36)
  sheet_id              String      @db.Char(36)
  date_added            DateTime    @db.Timestamp(0)
  pinned                Boolean
  date_pinned           DateTime?   @db.Timestamp(0)
  collections           collections @relation(fields: [collection_id], references: [collection_id], onDelete: NoAction, onUpdate: NoAction, map: "collections_sheets_collection_id_fk")
  sheets                sheets      @relation(fields: [sheet_id], references: [sheet_id], onDelete: NoAction, onUpdate: NoAction, map: "collections_sheets_sheet_id_fk")

  @@index([collection_id], map: "collections_sheets_collection_id_fk_idx")
  @@index([sheet_id], map: "collections_sheets_sheet_id_fk_idx")
}

model collections_videos {
  collections_videos_id String      @id @unique(map: "temp_collections_videos_id_UNIQUE") @db.Char(36)
  collection_id         String      @db.Char(36)
  video_id              String      @db.Char(36)
  date_added            DateTime    @db.Timestamp(0)
  pinned                Boolean
  date_pinned           DateTime?   @db.Timestamp(0)
  collections           collections @relation(fields: [collection_id], references: [collection_id], onDelete: NoAction, onUpdate: NoAction, map: "collections_videos_collection_id_fk")
  videos                videos      @relation(fields: [video_id], references: [video_id], onDelete: NoAction, onUpdate: NoAction, map: "collections_videos_video_id_fk")

  @@index([collection_id], map: "collections_videos_collection_id_fk_idx")
  @@index([video_id], map: "collections_videos_video_id_fk_idx")
}

model entities {
  entity_id             String                  @id @unique(map: "temp_entity_id_UNIQUE") @db.Char(36)
  entity_type           Int                     @default(0)
  collections           collections[]
  entities_images       entities_images[]
  entities_references   entities_references[]
  entities_sheets       entities_sheets[]
  entities_videos       entities_videos[]
  groups_members        groups_members[]
  images                images[]
  organizations_members organizations_members[]
  sheets                sheets[]
  videos                videos[]
}

model entities_images {
  entities_images_id String    @id @unique(map: "temp_entities_images_id_UNIQUE") @db.Char(36)
  entity_id          String    @db.Char(36)
  image_id           String    @db.Char(36)
  date_added         DateTime  @db.Timestamp(0)
  pinned             Boolean
  date_pinned        DateTime? @db.Timestamp(0)
  entities           entities  @relation(fields: [entity_id], references: [entity_id], onDelete: NoAction, onUpdate: NoAction, map: "entities_images_entity_id_fk")
  images             images    @relation(fields: [image_id], references: [image_id], onDelete: NoAction, onUpdate: NoAction, map: "entities_images_image_id_fk")

  @@index([entity_id], map: "entities_images_entity_id_fk_idx")
  @@index([image_id], map: "entities_images_image_id_fk_idx")
}

model entities_references {
  reference_id String   @id @unique(map: "temp_reference_id_UNIQUE") @db.Char(36)
  entity_id    String   @db.Char(36)
  title        String   @db.VarChar(256)
  author       String   @db.VarChar(256)
  url          String   @db.VarChar(256)
  entities     entities @relation(fields: [entity_id], references: [entity_id], onDelete: NoAction, onUpdate: NoAction, map: "entities_references_entity_id_fk")

  @@index([entity_id], map: "entities_references_entity_id_fk_idx")
}

model entities_sheets {
  entities_sheets_id String    @id @unique(map: "temp_entities_sheets_id_UNIQUE") @db.Char(36)
  entity_id          String    @db.Char(36)
  sheet_id           String    @db.Char(36)
  date_added         DateTime  @db.Timestamp(0)
  pinned             Boolean
  date_pinned        DateTime? @db.Timestamp(0)
  entities           entities  @relation(fields: [entity_id], references: [entity_id], onDelete: NoAction, onUpdate: NoAction, map: "entities_sheets_entity_id")
  sheets             sheets    @relation(fields: [sheet_id], references: [sheet_id], onDelete: NoAction, onUpdate: NoAction, map: "entities_sheets_sheet_id")

  @@index([entity_id])
  @@index([sheet_id])
}

model entities_videos {
  entities_videos_id String    @id @unique(map: "temp_entities_videos_id_UNIQUE") @db.Char(36)
  entity_id          String    @db.Char(36)
  video_id           String    @db.Char(36)
  date_added         DateTime  @db.Timestamp(0)
  pinned             Boolean
  date_pinned        DateTime? @db.Timestamp(0)
  entities           entities  @relation(fields: [entity_id], references: [entity_id], onDelete: NoAction, onUpdate: NoAction, map: "entities_videos_entity_id_fk")
  videos             videos    @relation(fields: [video_id], references: [video_id], onDelete: NoAction, onUpdate: NoAction, map: "entities_videos_video_id_fk")

  @@index([entity_id], map: "entities_videos_entity_id_fk_idx")
  @@index([video_id], map: "entities_videos_video_id_fk_idx")
}

model groups {
  group_id           String           @id @unique(map: "temp_group_id_UNIQUE") @db.Char(36)
  group_handle       String           @unique(map: "group_handle_UNIQUE") @db.VarChar(256)
  group_name         String           @db.VarChar(256)
  group_currentIssue String?          @db.Text
  group_stances      String?          @db.Text
  group_description  String?          @db.Text
  groups_members     groups_members[]
}

model groups_members {
  groups_members_id String   @id @unique(map: "groups_members_id_UNIQUE") @db.Char(36)
  group_id          String   @db.Char(36)
  entity_id         String   @db.Char(36)
  entities          entities @relation(fields: [entity_id], references: [entity_id], onDelete: NoAction, onUpdate: NoAction, map: "groups_members_entity_id_fk")
  groups            groups   @relation(fields: [group_id], references: [group_id], onDelete: NoAction, onUpdate: NoAction, map: "groups_members_group_id_fk")

  @@unique([group_id, entity_id], map: "unique_group_member_combination")
  @@index([entity_id], map: "groups_members_entity_id_fk")
  @@index([group_id], map: "groups_members_group_id_fk_idx")
}

model images {
  image_id           String               @id @unique(map: "temp_image_id_UNIQUE") @db.Char(36)
  image_creator_id   String               @db.Char(36)
  image_title        String               @db.VarChar(256)
  image_description  String               @db.Text
  image_filename     String               @db.VarChar(256)
  image_data_id      String               @db.Char(36)
  collections_images collections_images[]
  entities_images    entities_images[]
  entities           entities             @relation(fields: [image_creator_id], references: [entity_id], onDelete: NoAction, onUpdate: NoAction, map: "images_image_creator_id_fk")
  images_data        images_data          @relation(fields: [image_data_id], references: [image_data_id], onDelete: NoAction, onUpdate: NoAction, map: "images_image_data_id_fk")

  @@index([image_creator_id], map: "images_image_creator_id_fk_idx")
  @@index([image_data_id], map: "images_image_data_id_fk_idx")
}

model images_data {
  image_data_id String   @id @unique(map: "temp_image_data_id_UNIQUE") @db.Char(36)
  image_data    Bytes
  images        images[]
}

model individuals {
  individual_id           String           @id @unique(map: "temp_individual_id_UNIQUE") @db.Char(36)
  individual_username     String           @unique(map: "userName_UNIQUE") @db.VarChar(256)
  individual_name         String           @db.VarChar(256)
  individual_currentIssue String?          @db.Text
  individual_roles        String?          @db.Text
  individual_description  String?          @db.Text
  user_credentials        user_credentials @relation(fields: [individual_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "individuals_individual_id_fk")
}

model organizations {
  organization_id           String                  @id @unique(map: "temp_organization_id_UNIQUE") @db.Char(36)
  organization_handle       String                  @unique(map: "organization_handle_UNIQUE") @db.VarChar(256)
  organization_name         String                  @db.VarChar(256)
  organization_currentIssue String?                 @db.Text
  organization_stances      String?                 @db.Text
  organization_description  String?                 @db.Text
  organizations_members     organizations_members[]
}

model organizations_members {
  organizations_members_id String        @id @unique(map: "temp_organizations_members_id_UNIQUE") @db.Char(36)
  organization_id          String        @db.Char(36)
  entity_id                String        @db.Char(36)
  entities                 entities      @relation(fields: [entity_id], references: [entity_id], onDelete: NoAction, onUpdate: NoAction, map: "organizations_members_entity_id_fk")
  organizations            organizations @relation(fields: [organization_id], references: [organization_id], onDelete: NoAction, onUpdate: NoAction, map: "organizations_members_organization_id_fk")

  @@index([entity_id], map: "organizations_members_entity_id_fk_idx")
  @@index([organization_id], map: "organizations_members_organization_id_fk_idx")
}

model sheets {
  sheet_id           String               @id @unique(map: "temp_sheet_id_UNIQUE") @db.Char(36)
  sheet_author_id    String               @db.Char(36)
  sheet_title        String               @db.VarChar(256)
  sheet_subject      String               @db.Text
  sheet_filename     String               @db.VarChar(256)
  sheet_data_id      String               @db.Char(36)
  collections_sheets collections_sheets[]
  entities_sheets    entities_sheets[]
  entities           entities             @relation(fields: [sheet_author_id], references: [entity_id], onDelete: NoAction, onUpdate: NoAction, map: "sheets_sheet_author_id_fk")
  sheets_data        sheets_data          @relation(fields: [sheet_data_id], references: [sheet_data_id], onDelete: NoAction, onUpdate: NoAction, map: "sheets_sheet_data_id_fk")

  @@index([sheet_data_id], map: "Sheets_sheet_data_id_fk_idx")
  @@index([sheet_author_id], map: "sheets_sheet_author_id_fk_idx")
}

model sheets_data {
  sheet_data_id String   @id @unique(map: "temp_sheet_data_id_UNIQUE") @db.Char(36)
  sheet_data    Bytes
  sheets        sheets[]
}

model user_credentials {
  user_id           String       @id @unique(map: "user_id_UNIQUE") @db.Char(36)
  username          String       @unique(map: "username_UNIQUE") @db.VarChar(128)
  user_password     String       @db.VarChar(128)
  user_first_name   String?      @db.VarChar(128)
  user_last_name    String?      @db.VarChar(128)
  user_email        String?      @db.VarChar(128)
  user_phone_number String?      @db.VarChar(15)
  individuals       individuals?
}

model videos {
  video_id           String               @id @unique(map: "temp_video_id_UNIQUE") @db.Char(36)
  video_creator_id   String               @db.Char(36)
  video_title        String               @db.VarChar(256)
  video_description  String               @db.Text
  video_filename     String               @db.VarChar(256)
  video_data_id      String               @db.Char(36)
  collections_videos collections_videos[]
  entities_videos    entities_videos[]
  entities           entities             @relation(fields: [video_creator_id], references: [entity_id], onDelete: NoAction, onUpdate: NoAction, map: "videos_video_creator_id_fk")
  videos_data        videos_data          @relation(fields: [video_data_id], references: [video_data_id], onDelete: NoAction, onUpdate: NoAction, map: "videos_video_data_id_fk")

  @@index([video_creator_id], map: "videos_video_creator_id_fk_idx")
  @@index([video_data_id], map: "videos_video_data_id_fk_idx")
}

model videos_data {
  video_data_id String   @id @unique(map: "temp_video_data_id_UNIQUE") @db.Char(36)
  video_data    Bytes
  videos        videos[]
}
