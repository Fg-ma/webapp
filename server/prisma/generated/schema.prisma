generator client {
  provider = "prisma-client-js"
  output   = "./generated"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model affiliates_relations {
  affiliate_relation_id   String   @id @unique(map: "affiliate_relation_id_UNIQUE") @db.Char(36)
  affiliate_id_root       String   @db.Char(36)
  affiliate_id_target     String   @db.Char(36)
  affiliate_relation_date DateTime @default(dbgenerated("'2000-01-01 00:00:00'")) @db.Timestamp(0)

  @@unique([affiliate_id_root, affiliate_id_target], map: "unique_affiliate_combination")
}

model collections {
  collection_id       String                @id @unique(map: "collection_id_UNIQUE") @db.Char(36)
  collection_name     String                @db.VarChar(256)
  entity_id           String                @db.Char(36)
  entities            entities              @relation(fields: [entity_id], references: [entity_id], onDelete: NoAction, onUpdate: NoAction, map: "collections_entity_id_fk")
  collections_content collections_content[]

  @@index([entity_id], map: "collections_entity_id_fk_idx")
}

model collections_content {
  collections_content_id String      @id @unique(map: "collections_content_id_UNIQUE") @db.Char(36)
  collection_id          String      @db.Char(36)
  content_id             String      @db.Char(36)
  date_added             DateTime    @db.Timestamp(0)
  pinned                 Boolean
  date_pinned            DateTime?   @db.Timestamp(0)
  collections            collections @relation(fields: [collection_id], references: [collection_id], onDelete: NoAction, onUpdate: NoAction, map: "collections_content_collection_id_fk")
  content                content     @relation(fields: [content_id], references: [content_id], onDelete: NoAction, onUpdate: NoAction, map: "collections_content_content_id_fk")

  @@index([collection_id], map: "collections_content_collection_id_fk_idx")
  @@index([content_id], map: "collections_content_content_id_fk_idx")
}

model contacts {
  contact_id                                    String    @id @unique(map: "contact_id_UNIQUE") @db.Char(36)
  conversation_id                               String    @unique(map: "conversation_id_UNIQUE") @db.Char(36)
  contact_id_root                               String    @db.Char(36)
  contact_id_target                             String    @db.Char(36)
  contact_creation_date                         DateTime  @db.Timestamp(0)
  last_message                                  String?   @db.Text
  last_contact_date                             DateTime? @db.Timestamp(0)
  entities_contacts_contact_id_rootToentities   entities  @relation("contacts_contact_id_rootToentities", fields: [contact_id_root], references: [entity_id], onDelete: NoAction, onUpdate: NoAction, map: "contacts_contact_id_root_fk")
  entities_contacts_contact_id_targetToentities entities  @relation("contacts_contact_id_targetToentities", fields: [contact_id_target], references: [entity_id], onDelete: NoAction, onUpdate: NoAction, map: "contacts_contact_id_target_fk")

  @@unique([contact_id, conversation_id], map: "unique_contact_ids")
  @@unique([contact_id_root, contact_id_target], map: "unique_contact_members")
  @@index([contact_id_root], map: "contacts_contact_id_root_fk_idx")
  @@index([contact_id_target])
}

model content {
  content_id          String                @id @unique(map: "media_id_UNIQUE") @db.Char(36)
  content_type        Int?
  collections_content collections_content[]
  entities_content    entities_content[]
  entities_dislikes   entities_dislikes[]
  entities_likes      entities_likes[]
}

model conversations {
  conversation_id             String                        @id @unique(map: "conversation_id_UNIQUE") @db.Char(36)
  conversation_name           String?                       @db.VarChar(256)
  conversation_creation_date  DateTime                      @db.Timestamp(0)
  last_message                String?                       @db.Text
  last_message_date           DateTime?                     @db.Timestamp(0)
  conversations_members       conversations_members[]
  conversations_messages_logs conversations_messages_logs[]
}

model conversations_members {
  conversations_members_id String        @id @unique(map: "conversations_members_id_UNIQUE") @db.Char(36)
  conversation_id          String        @db.Char(36)
  member_id                String        @db.Char(36)
  conversations            conversations @relation(fields: [conversation_id], references: [conversation_id], onDelete: NoAction, onUpdate: NoAction, map: "conversations_members_conversation_id_fk")
  entities                 entities      @relation(fields: [member_id], references: [entity_id], onDelete: NoAction, onUpdate: NoAction, map: "conversations_members_member_id_fk")

  @@unique([conversation_id, member_id], map: "UNIQUE_ID_COMBO")
  @@index([member_id], map: "conversations_members_member_id_fk_idx")
}

model conversations_messages_logs {
  conversations_messages_logs_id String        @id @db.Char(36)
  conversation_id                String        @db.Char(36)
  entity_id                      String        @db.Char(36)
  message                        String        @db.Text
  message_date                   DateTime      @db.Timestamp(0)
  conversations                  conversations @relation(fields: [conversation_id], references: [conversation_id], onDelete: NoAction, onUpdate: NoAction, map: "conversations_messages_logs_conversation_id_fk")
  entities                       entities      @relation(fields: [entity_id], references: [entity_id], onDelete: NoAction, onUpdate: NoAction, map: "conversations_messages_logs_entity_id_fk")

  @@index([conversation_id], map: "conversations_messages_logs_conversation_id_fk_idx")
  @@index([entity_id], map: "conversations_messages_logs_entity_id_fk_idx")
}

model entities {
  entity_id                                     String                        @id @unique(map: "entity_id_UNIQUE") @db.Char(36)
  entity_username                               String                        @unique(map: "entity_username_UNIQUE") @db.VarChar(256)
  entity_type                                   Int                           @default(0)
  collections                                   collections[]
  contacts_contacts_contact_id_rootToentities   contacts[]                    @relation("contacts_contact_id_rootToentities")
  contacts_contacts_contact_id_targetToentities contacts[]                    @relation("contacts_contact_id_targetToentities")
  conversations_members                         conversations_members[]
  conversations_messages_logs                   conversations_messages_logs[]
  entities_content                              entities_content[]
  entities_dislikes                             entities_dislikes[]
  entities_likes                                entities_likes[]
  entities_references                           entities_references[]
  groups_members                                groups_members[]
  images                                        images[]
  organizations_members                         organizations_members[]
  sheets                                        sheets[]
  videos                                        videos[]
}

model entities_content {
  entities_content_id String    @id @unique(map: "entities_content_id_UNIQUE") @db.Char(36)
  entity_id           String    @db.Char(36)
  content_id          String    @db.Char(36)
  date_added          DateTime  @db.Timestamp(0)
  pinned              Boolean
  date_pinned         DateTime? @db.Timestamp(0)
  content             content   @relation(fields: [content_id], references: [content_id], onDelete: NoAction, onUpdate: NoAction, map: "entities_content_content_id")
  entities            entities  @relation(fields: [entity_id], references: [entity_id], onDelete: NoAction, onUpdate: NoAction, map: "entities_content_entity_id")

  @@index([content_id])
  @@index([entity_id])
}

model entities_dislikes {
  dislike_id String   @id @unique(map: "dislike_id_UNIQUE") @db.Char(36)
  entity_id  String   @db.Char(36)
  content_id String   @db.Char(36)
  content    content  @relation(fields: [content_id], references: [content_id], onDelete: NoAction, onUpdate: NoAction, map: "entities_dislikes_content_id_fk")
  entities   entities @relation(fields: [entity_id], references: [entity_id], onDelete: NoAction, onUpdate: NoAction, map: "entities_dislikes_entity_id_fk")

  @@unique([entity_id, content_id], map: "entities_dislikes_unique_combination")
  @@index([content_id], map: "entities_dislikes_content_id_fk_idx")
}

model entities_likes {
  like_id    String   @id @unique(map: "like_id_UNIQUE") @db.Char(36)
  entity_id  String   @db.Char(36)
  content_id String   @db.Char(36)
  content    content  @relation(fields: [content_id], references: [content_id], onDelete: NoAction, onUpdate: NoAction, map: "entities_likes_content_id_fk")
  entities   entities @relation(fields: [entity_id], references: [entity_id], onDelete: NoAction, onUpdate: NoAction, map: "entities_likes_entity_id_fk")

  @@unique([entity_id, content_id], map: "entities_likes_unique_combination")
  @@index([content_id], map: "entities_likes_content_id_fk_idx")
  @@index([entity_id], map: "entities_likes_entity_id_fk_idx")
}

model entities_references {
  reference_id String   @id @unique(map: "reference_id_UNIQUE") @db.Char(36)
  entity_id    String   @db.Char(36)
  title        String   @db.VarChar(256)
  author       String   @db.VarChar(256)
  url          String   @db.VarChar(256)
  entities     entities @relation(fields: [entity_id], references: [entity_id], onDelete: NoAction, onUpdate: NoAction, map: "entities_references_entity_id_fk")

  @@index([entity_id], map: "entities_references_entity_id_fk_idx")
}

model groups {
  group_id            String            @id @unique(map: "group_id_UNIQUE") @db.Char(36)
  group_handle        String            @unique(map: "group_handle_UNIQUE") @db.VarChar(256)
  group_name          String?           @db.VarChar(256)
  group_current_issue String?           @db.Text
  group_stances       String?           @db.Text
  group_description   String?           @db.Text
  profile_picture_id  String?           @db.Char(36)
  profile_pictures    profile_pictures? @relation(fields: [profile_picture_id], references: [profile_picture_id], onDelete: NoAction, onUpdate: NoAction, map: "groups_profile_picture_id_fk")
  groups_members      groups_members[]

  @@index([profile_picture_id], map: "groups_profile_picture_id_fk_idx")
}

model groups_members {
  groups_members_id String   @id @unique(map: "groups_members_id_UNIQUE") @db.Char(36)
  group_id          String   @db.Char(36)
  entity_id         String   @db.Char(36)
  entities          entities @relation(fields: [entity_id], references: [entity_id], onDelete: NoAction, onUpdate: NoAction, map: "groups_members_entity_id_fk")
  groups            groups   @relation(fields: [group_id], references: [group_id], onDelete: NoAction, onUpdate: NoAction, map: "groups_members_group_id_fk")

  @@unique([group_id, entity_id], map: "unique_group_member_combination")
  @@index([entity_id], map: "groups_members_entity_id_fk")
  @@index([group_id], map: "groups_members_group_id_fk_idx")
}

model images {
  image_id          String      @id @unique(map: "image_id_UNIQUE") @db.Char(36)
  image_creator_id  String      @db.Char(36)
  image_title       String      @db.VarChar(256)
  image_description String      @db.Text
  image_filename    String      @db.VarChar(256)
  image_data_id     String      @db.Char(36)
  image_likes       Int         @default(0)
  image_dislikes    Int         @default(0)
  image_views       Int         @default(0)
  image_date_posted DateTime    @default(dbgenerated("'2000-01-01 01:01:01'")) @db.Timestamp(0)
  entities          entities    @relation(fields: [image_creator_id], references: [entity_id], onDelete: NoAction, onUpdate: NoAction, map: "images_image_creator_id_fk")
  images_data       images_data @relation(fields: [image_data_id], references: [image_data_id], onDelete: NoAction, onUpdate: NoAction, map: "images_image_data_id_fk")

  @@index([image_creator_id], map: "images_image_creator_id_fk_idx")
  @@index([image_data_id], map: "images_image_data_id_fk_idx")
}

model images_data {
  image_data_id String   @id @unique(map: "image_data_id_UNIQUE") @db.Char(36)
  image_data    Bytes
  images        images[]
}

model individuals {
  individual_id            String            @id @unique(map: "individual_id_UNIQUE") @db.Char(36)
  individual_username      String            @unique(map: "userName_UNIQUE") @db.VarChar(256)
  individual_name          String?           @db.VarChar(256)
  individual_current_issue String?           @db.Text
  individual_roles         String?           @db.Text
  individual_description   String?           @db.Text
  profile_picture_id       String?           @db.Char(36)
  user_credentials         user_credentials  @relation(fields: [individual_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "individuals_individual_id_fk")
  profile_pictures         profile_pictures? @relation(fields: [profile_picture_id], references: [profile_picture_id], onDelete: NoAction, onUpdate: NoAction, map: "individuals_profile_picture_id_fk")

  @@index([profile_picture_id], map: "individuals_profile_picture_id_fk_idx")
}

model organizations {
  organization_id            String                  @id @unique(map: "organization_id_UNIQUE") @db.Char(36)
  organization_handle        String                  @unique(map: "organization_handle_UNIQUE") @db.VarChar(256)
  organization_name          String?                 @db.VarChar(256)
  organization_current_issue String?                 @db.Text
  organization_stances       String?                 @db.Text
  organization_description   String?                 @db.Text
  profile_picture_id         String?                 @db.Char(36)
  profile_pictures           profile_pictures?       @relation(fields: [profile_picture_id], references: [profile_picture_id], onDelete: NoAction, onUpdate: NoAction, map: "organizations_profile_picture_id")
  organizations_members      organizations_members[]

  @@index([profile_picture_id])
}

model organizations_members {
  organizations_members_id String        @id @unique(map: "organizations_members_id_UNIQUE") @db.Char(36)
  organization_id          String        @db.Char(36)
  entity_id                String        @db.Char(36)
  entities                 entities      @relation(fields: [entity_id], references: [entity_id], onDelete: NoAction, onUpdate: NoAction, map: "organizations_members_entity_id_fk")
  organizations            organizations @relation(fields: [organization_id], references: [organization_id], onDelete: NoAction, onUpdate: NoAction, map: "organizations_members_organization_id_fk")

  @@index([entity_id], map: "organizations_members_entity_id_fk_idx")
  @@index([organization_id], map: "organizations_members_organization_id_fk_idx")
}

model profile_pictures {
  profile_picture_id       String          @id @unique(map: "profile_picture_id_UNIQUE") @db.Char(36)
  profile_picture_data     Bytes
  profile_picture_filename String?         @db.VarChar(256)
  groups                   groups[]
  individuals              individuals[]
  organizations            organizations[]
}

model sheets {
  sheet_id           String             @id @unique(map: "sheet_id_UNIQUE") @db.Char(36)
  sheet_author_id    String             @db.Char(36)
  sheet_title        String             @db.VarChar(256)
  sheet_subject      String             @db.Text
  sheet_filename     String             @db.VarChar(256)
  sheet_data_id      String             @db.Char(36)
  sheet_thumbnail_id String?            @db.Char(36)
  sheet_likes        Int                @default(0)
  sheet_dislikes     Int                @default(0)
  sheet_views        Int                @default(0)
  sheet_date_posted  DateTime           @default(dbgenerated("'2000-01-01 01:01:01'")) @db.Timestamp(0)
  entities           entities           @relation(fields: [sheet_author_id], references: [entity_id], onDelete: NoAction, onUpdate: NoAction, map: "sheets_sheet_author_id_fk")
  sheets_data        sheets_data        @relation(fields: [sheet_data_id], references: [sheet_data_id], onDelete: NoAction, onUpdate: NoAction, map: "sheets_sheet_data_id_fk")
  sheets_thumbnails  sheets_thumbnails? @relation(fields: [sheet_thumbnail_id], references: [sheet_thumbnail_id], onDelete: NoAction, onUpdate: NoAction, map: "sheets_sheet_thumbnail_id")

  @@index([sheet_data_id], map: "Sheets_sheet_data_id_fk_idx")
  @@index([sheet_author_id], map: "sheets_sheet_author_id_fk_idx")
  @@index([sheet_thumbnail_id], map: "sheets_sheet_tumbnail_id_idx")
}

model sheets_data {
  sheet_data_id String   @id @unique(map: "sheet_data_id_UNIQUE") @db.Char(36)
  sheet_data    Bytes
  sheets        sheets[]
}

model sheets_thumbnails {
  sheet_thumbnail_id          String   @id @unique(map: "sheet_thumbnail_id_UNIQUE") @db.Char(36)
  sheet_thumbnail_data        Bytes
  sheet_thumbnail_filename    String   @db.VarChar(256)
  sheet_thumbnail_description String?  @db.VarChar(512)
  sheets                      sheets[]
}

model user_credentials {
  user_id           String       @id @unique(map: "user_id_UNIQUE") @db.Char(36)
  username          String       @unique(map: "username_UNIQUE") @db.VarChar(128)
  user_password     String       @db.VarChar(128)
  user_first_name   String?      @db.VarChar(128)
  user_last_name    String?      @db.VarChar(128)
  user_email        String?      @db.VarChar(128)
  user_phone_number String?      @db.VarChar(15)
  individuals       individuals?
}

model videos {
  video_id           String             @id @unique(map: "video_id_UNIQUE") @db.Char(36)
  video_creator_id   String             @db.Char(36)
  video_title        String             @db.VarChar(256)
  video_description  String             @db.Text
  video_filename     String             @db.VarChar(256)
  video_data_id      String             @db.Char(36)
  video_thumbnail_id String?            @db.Char(36)
  video_likes        Int                @default(0)
  video_dislikes     Int                @default(0)
  video_views        Int                @default(0)
  video_date_posted  DateTime?          @default(dbgenerated("'2000-01-01 01:01:01'")) @db.Timestamp(0)
  entities           entities           @relation(fields: [video_creator_id], references: [entity_id], onDelete: NoAction, onUpdate: NoAction, map: "videos_video_creator_id_fk")
  videos_data        videos_data        @relation(fields: [video_data_id], references: [video_data_id], onDelete: NoAction, onUpdate: NoAction, map: "videos_video_data_id_fk")
  videos_thumbnails  videos_thumbnails? @relation(fields: [video_thumbnail_id], references: [video_thumbnail_id], onDelete: NoAction, onUpdate: NoAction, map: "videos_video_thumbnail_id_fk")

  @@index([video_creator_id], map: "videos_video_creator_id_fk_idx")
  @@index([video_data_id], map: "videos_video_data_id_fk_idx")
  @@index([video_thumbnail_id], map: "videos_video_thumbnail_id_fk_idx")
}

model videos_data {
  video_data_id String   @id @unique(map: "video_data_id_UNIQUE") @db.Char(36)
  video_data    Bytes
  videos        videos[]
}

model videos_thumbnails {
  video_thumbnail_id          String   @id @unique(map: "videos_thumbnails_id_UNIQUE") @db.Char(36)
  video_thumbnail_data        Bytes
  video_thumbnail_filename    String   @db.VarChar(256)
  video_thumbnail_description String?  @db.VarChar(512)
  videos                      videos[]
}
